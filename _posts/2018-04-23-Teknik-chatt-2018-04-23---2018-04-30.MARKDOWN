---
layout: post
title: Teknik-chatt 2018-04-23 - 2018-04-30
excerpt_separator: <!--excerpt-->
---
<section class="message" markdown="1">
### oscarnylander - 2018-04-23 09:29 22s

@Unkown I for one welcome my new Microsoft overlords 🐧
</section>
<section class="message" markdown="1">
### erik.malm - 2018-04-23 20:11 21s

Riktigt intressant för min del @daniel.winther, finns typ en bransch-standard inom PSD2 ([https://www.berlin-group.org/psd2-access-to-bank-accounts](https://www.berlin-group.org/psd2-access-to-bank-accounts)). Får gräva igenom hur nära dessa Tink ligger.
</section>
<section class="message" markdown="1">
### erik.malm - 2018-04-27 06:58 04s

Behöver göra mig av med ett gäng gamla hårddiskar. Vill gärna utplåna informationen på dem innan det är dags för tippen, om någon har en favorit-utility för sådant så mottages tips gärna.
</section>
<section class="message" markdown="1">
### oscarnylander - 2018-04-27 09:22 00s

DBAN är väl en klassiker
</section>
<section class="message" markdown="1">
### oscarnylander - 2018-04-27 09:51 33s

[https://www.palletsprojects.com/blog/flask-1-0-released/](https://www.palletsprojects.com/blog/flask-1-0-released/)

Flask har kommit ut med en 1.0-release! Intressant.

<div class="attachment"><h4>Flask 1.0 Released</h4><div class="text"></div>
<a href="https://www.palletsprojects.com/blog/flask-1-0-released/"><img src="https://www.palletsprojects.com/og_image.png" fallback="Flask 1.0 Released"/></a></div>
    
</section>
<section class="message" markdown="1">
### daniel.winther - 2018-04-27 09:54 53s

woop woop! på tiden 😄
har ju funnits hur länge som helst
</section>
<section class="message" markdown="1">
### oscarnylander - 2018-04-27 09:56 01s

eller hur, märkvärdigt att de inte gått till 1.0 ännu
</section>
<section class="message" markdown="1">
### erik.malm - 2018-04-27 11:50 44s

Haha, Flask fanns till och med när jag skrev ordentligt med Python senast. Tur att jag väntade i ca 10 år så att jag inte lärt mig omogen teknik! ;)
Även om jag mer tror att det här är ett fall av att hantera versioner som Linus.
[https://betanews.com/2018/04/16/linux-kernel-5-0/](https://betanews.com/2018/04/16/linux-kernel-5-0/)

<div class="attachment"><h4>Linus Torvalds says Linux kernel v5.0 'should be meaningless'</h4><div class="text">Following the release of Linux kernel 4.16, Linus Torvalds has said that the next kernel will be version 5.0. Or maybe it won't, because version numbers are meaningless.</div>
<a href="https://betanews.com/2018/04/16/linux-kernel-5-0/"><div class="linkdiv"><img src="/assets/blogAssets/Linus Torvalds says Linux kernel v5.0 'should be meaningless'" fallback="Linus Torvalds says Linux kernel v5.0 'should be meaningless'"/></div></a></div>
    
</section>
<section class="message" markdown="1">
### oscarnylander - 2018-04-27 11:55 44s

Troligen är det så 🙂
</section>
<section class="message" markdown="1">
### erik.malm - 2018-04-27 11:56 07s

DBAN verkar vara precis rätt verktyg @daniel.winther
</section>
<section class="message" markdown="1">
### oscarnylander - 2018-04-27 11:56 27s

*@oscarnylander 😞
</section>
<section class="message" markdown="1">
### teo.roijezon - 2018-04-27 11:58 09s

@erik.malm @oscarnylander använd inte DBAN för SSD:er
</section>
<section class="message" markdown="1">
### erik.malm - 2018-04-27 11:58 19s

Förr i världen har jag låtit bash skriva från /dev/random över hela disken ett par vändor men har inte energi för det den här gången.
</section>
<section class="message" markdown="1">
### teo.roijezon - 2018-04-27 11:58 46s

dom har mycket intern skrivbalansering osv vilket innebär att rester kommer finnas kvar
använd [https://ata.wiki.kernel.org/index.php/ATA_Secure_Erase](https://ata.wiki.kernel.org/index.php/ATA_Secure_Erase) istället
</section>
<section class="message" markdown="1">
### erik.malm - 2018-04-27 11:59 54s

Mmm.. Den nivå på teknik jag gör mig av med är 5200rpms diskar så inte ett problem den här vändan. Men lär vara relevant nästa gång jag kör en utrensning.

<!--excerpt-->
</section>
<section class="message" markdown="1">
### teo.roijezon - 2018-04-27 12:00 04s

ahh okej
ja då borde det räcka
eller bara `dd if=/dev/urandom of=/dev/sdXN bs=1M` ett par ggr
</section>
<section class="message" markdown="1">
### oscarnylander - 2018-04-27 12:01 20s

`dd: disk destroyer` :parrot:
</section>
<section class="message" markdown="1">
### erik.malm - 2018-04-27 12:01 26s

Det är min vanliga. Men det är fem diskar som kommer behöva behandlas och då slår latmasken till
</section>
<section class="message" markdown="1">
### teo.roijezon - 2018-04-27 12:01 32s

ahh, iC
</section>
<section class="message" markdown="1">
### oscarnylander - 2018-04-27 12:01 43s

koppla in alla och kör parallellt!
</section>
<section class="message" markdown="1">
### erik.malm - 2018-04-27 12:02 50s

Om de bara vore thunderbolt så kunde jag daisy-chaina allt!
Som en hårddisk konga-line!
</section>
<section class="message" markdown="1">
### teo.roijezon - 2018-04-27 12:05 24s

[https://www.youtube.com/watch?v=deJ9lpNBZUA](https://www.youtube.com/watch?v=deJ9lpNBZUA)

<div class="attachment"><h4>That Mitchell and Webb Look - Posh Dancing</h4><div class="text"></div>
<a href="https://www.youtube.com/watch?v=deJ9lpNBZUA"><div class="linkdiv"><img src="/assets/blogAssets/That Mitchell and Webb Look - Posh Dancing" fallback="That Mitchell and Webb Look - Posh Dancing"/></div></a></div>
    
</section>
<section class="message" markdown="1">
### erik.malm - 2018-04-27 12:09 35s

Jag är nöjd med hur den här diskussionen slutade.
P.S. are we the baddies?
</section>
<section class="message" markdown="1">
### teo.roijezon - 2018-04-27 12:10 58s

tror inte vi har dödskallehattar än?
Johan får ta tag i det 😛
</section>
<section class="message" markdown="1">
### joakoles - 2018-04-28 17:47 28s

För ett tag sedan sa jag att jag skulle informera om resultatet av prestandatest-applikationen jag skrev som skulle mäta prestandan i azure event hub (vilket kan ses som ett kafka-alternativ). Applikationen jag skrev består av två delar: En del som skriver en massa events (med samma storlek som vi skickar i produktion) till event hub och en del som läser dessa events från event hub. Skriv-delen är ett azure webjob och läs-delen är en azure function. Båda dessa delar kan skalas upp och ut som man vill. Även själva event hub'en kan skalas genom att höja antalet throughput units (TPU) och antalet partitioner (i praktiken måste man radera och skapa en ny event hub då man inte kan ändra antalet partitioner i efterhand).

Både skriv- och läs-delen hanterar intervall. Man kan då ange att varje instans ska skicka tex. 100 meddelanden per sekund under tex. 1 minut och därefter höja till 500 och därefter till 1000 meddelanden per sekund. 

Läs-delen beräknar lite enkla mätdata för att ta reda på prestandan. Mätdatan lagras inte i databasen för varje event då det skulle påverka resultatet mycket. Istället lagras bara mätdatan en gång per intervall, dvs. tex. en gång per minut.

Resultatet visade att throughput blir högt om man skalar upp/ut men att latensen för en del av eventen är förvånansvärt högt trots att man skalat upp/ut (åtminstone blev jag förvånad). De flesta events går igenom event hub'en snabbt men en liten andel tar över en sekund och ibland över 5 sekunder.

Microsoft har själva gjort ett liknande test fast för ett längre flöde och fler events per sekund. Även där ser man att en andel av eventen passerar genom flödet mycket långsammare än genomsnittet. Hälften av eventen passerar flödet på mindre än 1,1 sek medan en del tar mycket längre tid: [https://blogs.msdn.microsoft.com/appserviceteam/2017/09/19/processing-100000-events-per-second-on-azure-functions/](https://blogs.msdn.microsoft.com/appserviceteam/2017/09/19/processing-100000-events-per-second-on-azure-functions/)

Jag vill dock inte påstå att mina mätresultat är 100% tillförlitliga. Det kan vara så att något i applikationen jag skrev är suboptimalt. Dessutom kan klockan skilja sig mellan olika maskiner i azure vilket skulle ge stor effekt på mätresultaten. Jag hörde någon berätta att det är vanligt att klockan i azure-maskiner är "korrekt tid +/- 2 sekunder" vilket innebär ett intervall på 4 sekunder. Ett förslag på workaround är att förlita sig på databas-serverns klocka för att kompensera för detta. Vid uppstart skulle applikationen (både skriv- och läs-sidan) kunna hämta tiden från db-servern för att ta reda på hur den lokala klockan skiljer sig från "sanningen" om vi definerar db-serverns klocka som "sanningen" i prestandatestet. Applikationen får då ta hänsyn till differensen däremellan. Därmed kompenserar man för skillnad i klocka på olika maskiner. Då jag bytt team har jag inte implementerat denna workaround men jag har tipsat teamet om detta.
</section>